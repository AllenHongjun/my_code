
@{
                /**/

                Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>用户列表</title>
    @*<link href="~/Content/themes/metro/easyui.css" rel="stylesheet" />*@
    <link href="~/Content/themes/material/easyui.css" rel="stylesheet" />

    <link href="~/Content/themes/color.css" rel="stylesheet" />
    <link href="~/Content/themes/icon.css" rel="stylesheet" />

    <script src="~/Scripts/jquery-3.0.0.js"></script>
    <script src="~/Scripts/jquery.easyui-1.4.5.js"></script>


    <script src="~/Scripts/locale/easyui-lang-zh_CN.js"></script>


    <script src="~/Scripts/jquery.validate.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>

</head>
<body>
    <div class="container">
        用户名:<input type="text" id="txtSearchName" />&nbsp;&nbsp;
        备注:  <input type="text" id="txtSearchRemark" />
        <a href="#" class="easyui-linkbutton" data-options="iconCls:'icon-search'" style="width:80px" id="btnSearch">搜索</a>
        <table id="tt" style="width: 700px;" title="标题，可以使用代码进行初始化，也可以使用这种属性的方式" iconcls="icon-edit"></table>

    </div>

    <!--------------添加数据---------------------->
    @*这 dilog 就是一个div里面可以放置自己想要的的元素 里面都是会原模原样的输出出来
        做后台肯定是有一套主键 和插件 让我们使用 这个就是知道他的用户然后来使用就可以了

        其他的数据框能不能加一点样式 更加的统一一点

    *@


    <div id="addDiv" style="display:none;">
        @using (Ajax.BeginForm("AddUserInfo", "UserInfo", new { }, new AjaxOptions() { HttpMethod = "post", OnSuccess = "afterAdd" }, new { id = "addForm" }))
        {
            <div style="width:290px;margin:5px auto;padding:30px 60px">
                <div style="margin-bottom:20px">
                    <div>用户名:</div>
                    <input type="text" name="UserName" class="easyui-textbox" data-options="required:true,validType:'length[3,10]'" style="width:100%;height:32px">
                </div>
                <div style="margin-bottom:20px">
                    <div>密码:</div>
                    <input type="password" name="UserPass" class="easyui-textbox" style="width:100%;height:32px" data-options="required:true,validType:'length[3,10]'">
                </div>
                <div style="margin-bottom:20px">
                    <div>邮箱:</div>
                    <input type="text" name="Email" class="easyui-textbox" style="width:100%;height:32px" data-options="prompt:'请输入邮箱.',required:true,validType:'email'">
                </div>
                <div style="margin-bottom:20px">
                    <div>排序:</div>
                    <input type="text" name="Sort" class="easyui-textbox" style="width:100%;height:32px" data-options="required:true,validType:'length[1,3]'">
                </div>
            </div>
        }
    </div>


    <div id="editDiv" style="display:none;">
        @using (Ajax.BeginForm("EditUserInfo", "UserInfo", new { }, new AjaxOptions() { HttpMethod = "post", OnBegin="beforeEdit", OnSuccess = "afterEdit" }, new { id = "editForm" }))
        {
            <input type="hidden" name="ID" id="txtId" />
            <input type="hidden" name="RegTime" id="txtRegTime" />
            <input type="hidden" name="DelFlag" id="txtDelFlag" />
            <div style="width:290px;margin:5px auto;padding:30px 60px">
                <div style="margin-bottom:20px">
                    <div>用户名:</div>
                    <input id="txtUserName" type="text" name="UserName" class="easyui-textbox" data-options="required:true,validType:'length[3,10]'" style="width:100%;height:32px">
                </div>
                <div style="margin-bottom:20px">
                    <div>密码:</div>
                    <input id="txtUserPass" type="password" name="UserPass" class="easyui-textbox" style="width:100%;height:32px" data-options="required:true,validType:'length[3,10]'">
                </div>
                <div style="margin-bottom:20px">
                    <div>邮箱:</div>
                    <input id="txtEmail" type="text" name="Email" class="easyui-textbox" style="width:100%;height:32px" data-options="prompt:'请输入邮箱.',required:true,validType:'email'">
                </div>
                <div style="margin-bottom:20px">
                    <div>排序:</div>
                    <input id="txtSort" type="text" name="Sort" class="easyui-textbox" style="width:100%;height:32px" data-options="required:true,validType:'length[1,5]'">
                </div>
            </div>
        }
    </div>


    <!--------------修改数据---------------------->
    @*<div id="editDiv" style="display:none;">
        @using (Ajax.BeginForm("EditUserInfo", "UserInfo", new { }, new AjaxOptions() { HttpMethod = "post", OnSuccess = "afterEdit" }, new { id = "editForm" }))
        {
            <input type="hidden" name="ID" id="txtId" />
            <input type="hidden" name="SubTime" id="txtSubTime" />
            <input type="hidden" name="DelFlag" id="txtDelFlag" />
            <table>
                <tr><td>用户名</td><td><input type="text" name="UName" id="txtUName" /></td></tr>
                <tr><td>密码</td><td><input type="text" name="UPwd" id="txtUPwd" /></td></tr>
                <tr><td>备注</td><td><input type="text" name="Remark" id="txtRemark" /></td></tr>
                <tr><td>排序</td><td><input type="text" name="Sort" id="txtSort" /></td></tr>
            </table>
        }
    </div>*@

    <script type="text/javascript">
        $(function () {
            //$("#addDiv").css("display", "none");
            //$("#editDiv").css("display", "none");
            //给搜索按钮加一个单击事件
            $("#btnSearch").click(function () {
                //获取用户输入的搜索数据.
                var pars = {
                    name: $("#txtSearchName").val(),
                    remark: $("#txtSearchRemark").val()
                };
                //将获取的搜索的数据发送到服务端。
                loadData(pars)
            });
            loadData();


        });

        //加载数据的方法
        function loadData(pars) {
            $('#tt').datagrid({
                url: '/Admin/UserInfo/GetUserInfoList',
                title: '用户数据表格',
                width: 1200,
                height: 600,
                fitColumns: true, //列自适应
                nowrap: false,
                idField: 'ID',//主键列的列明
                loadMsg: '正在加载用户的信息...',
                pagination: true,//是否有分页
                singleSelect: false,//是否单行选择
                pageSize: 10,//页大小，一页多少条数据
                pageNumber: 1,//当前页，默认的
                pageList: [10, 15, 50, 100],
                queryParams: pars,//往后台传递参数
                columns: [[//c.UserName, c.UserPass, c.Email, c.RegTime
                    //{ field: 'ck', checkbox: true, align: 'left', width: 50 },
                    { field: 'ID', title: '编号', width: 80 },
                    { field: 'UName', title: '姓名', width: 120 },
                    { field: 'UPwd', title: '密码', width: 120 },
                    { field: 'Remark', title: '备注', width: 120 },
                    {
                        field: 'SubTime', title: '时间', width: 80, align: 'right',
                        formatter: function (value, row, index) {
                            //return (eval(value.replace(/\/Date\((\d+)\)\//gi, "new Date($1)"))).pattern("yyyy-M-d");
                        }
                    }
                ]],
                toolbar: [{
                    id: 'btnDelete',
                    text: '删除',
                    iconCls: 'icon-remove',
                    handler: function () {
                        //点击删除按钮要执行的操作 
                        //前后端分离 
                        //如果做 手机版 要做的前后端分离 是要用到的技术 合适的技术 使用合适的地方
                        deleteInfo();
                    }
                }, {
                    id: 'btnAdd',
                    text: '添加',
                    iconCls: 'icon-add',
                    handler: function () {

                        addInfo();
                    }
                }, {
                    id: 'btnEidt',
                    text: '编辑',
                    iconCls: 'icon-edit',
                    handler: function () {

                        showEditInfo();
                    }
                }],
            });
        }

        //客户端的业务逻辑判断 EasyUI的组件的使用 非常适合后台开发 
        //UI组件 一套已经全部都是有了 批量删除用户信息 一套的每一个点都是要知道 有一个点不知道就会卡组
        //js程序的作用于 程序的运行 执行顺序 问题
        function deleteInfo() {
            //获取选中了哪一行 可以去查看手册 查看官方文档 测试一
            var rows = $("#tt").datagrid("getSelections");
           
            if (!rows || rows.length == 0) {
                $.messager.alert("提醒", "请选择要删除的记录！", "error");
                return false;
            }
            //判断是否选中了那一行 选中了几行


            //弹出提示提示框是否要删除数据 
            $.messager.confirm("提示", "确定要删除数据吗?", function (r) {
                
                //r是提示框的返回
                if (r) {
                    //将要删除的数据  
                    //拼接 1，2，3，4，5，6 字符串拼接 处理数据
                    //不是你想想的那么简单的 做一遍 
                    var rowsLength = rows.length;
                    var strId = "";
                    for (var i = 0; i < rowsLength; i++) {
                        strId += rows[i].ID+",";
                    }
                    console.log(strId);
                    //一个函数的用户就要查一下手册了又是一个点这么多的函数使用
                    //其实是很好理解的 就是讲最后一个字符串截取掉
                    //不要纠结于哪个语言  那种技术 
                    console.log(strId.length);

                    strId = strId.substr(0, strId.length - 1);
                    console.log(strId.length);

                    //application/x-www-form-urlencod 默认的表单提交的方式
                    //有些东西 就是都已经帮你处理好了

                    //这个还是比较基础的版本 你要做的比较完善的话 肯定还是有一些效果 东西可以做可以添加的 
                    //挺不错的列表 增加 修改 批量删除  基本上代码 都是一行一行 有敲过的。这个感觉确实是不太一样。
                    $.post("/Admin/UserInfo/DeleteUserInfo", { "strId": strId }, function (data) {
                        if (data == "ok") {
                            //表格重新加载 
                            //就还可以继续封装
                            $("#tt").datagrid("reload");
                            $("#tt").datagrid("clearSelections");
                        } else {
                            $.messager.alert("提示", "删除记录失败！！", "error");
                        }
                    })




                }


            });

            //发送请求 要删除

            //删除成功提示 删除失败提示

            //其他更加新的前端框架的使用 

            //多表的复杂的业务逻辑的使用


        }
   

        //添加数据
        function addInfo() {
            $("#addDiv").css("display", "block");
            $('#addDiv').dialog({
                title: '添加用户数据',
                width: 430,
                height: 600,
                collapsible: true,
                maximizable: true,
                resizable: true,
                modal: true,
                buttons: [{
                    text: '确定',
                    iconCls: 'icon-ok',
                    handler: function () {
                        //表单校验  这里表单验证如果不通过就会返回结束方法继续往下执行
                        //如果
                        //validateInfo($("#addForm"));

                        //unobtrusive-ajax 使用了这个插件来帮助我们ajax提交表单 z
                        //可以结合asp.net  mvc 帮助我们更加容易的完成任务
                        //前端校验

                        //此处修改使用EASY ui自带的表单验证 不然的话使用 easy的控件的时候 会修改input 无法使用表单验证插件
                        var isValidate = $("#addForm").form('validate');
                        if (isValidate) {
                            $("#addForm").submit();//提交表单
                        }

                    }
                }, {
                    text: '取消',
                    handler: function () {
                        $('#addDiv').dialog('close');
                    }
                }]
            });

        }


        

        //完成添加后调用该方法
        function afterAdd(data) {
            if (data == "ok") {
                $('#addDiv').dialog('close');
                $('#tt').datagrid('reload');//加载表格不会跳到第一页。
                $("#addForm input").val("");
            }
            if (data == "fail") {
                //使用一个好看点样式框 弹出服务端给出的错误提示
                alert("数据添加失败");
            }
        }

        
        //表单校验
        //function validateInfo(control) {
        //    console.log("Begin-Validate");
        //    control.validate({//表示对哪个form表单进行校验，获取form标签的id属性的值
        //        rules: {//表示验证规则
        //            UName: "required",//表示对哪个表单元素进行校验，要写具体的表单元素的name属性的值
        //            Remark: {
        //                required: true
        //            },
        //            UPwd: {
        //                required: true,
        //                minlength: 5
        //            },
        //            Sort: {
        //                required: true
        //            }
        //        },
        //        messages: {
        //            UName: "请输入用户名",
        //            Remark: {
        //                required: "请输入备注"
        //            },
        //            UPwd: {
        //                required: "请输入密码",
        //                minlength: "密码不能小于{0}个字 符"
        //            },
        //            Sort: {
        //                required: "请输入排序"
        //            }
        //        }
        //    });
        //}


        //

        //展示一下要修改的数据.


        function showEditInfo() {
            //判断一下用户是否选择了要修改的数据
            var rows = $('#tt').datagrid('getSelections');//获取所选择的行
            if (rows.length != 1) {
                $.messager.alert("提示", "请选择一条要修改的数据", "error");
                return;
            }
            //将要修改的数据查询出来，显示到文本框中。

            //有些东西是没有办法 必须一步一步的走一点一点的做的
            var id = rows[0].ID;
            $.post("/Admin/UserInfo/ShowEditInfo", { "id": id }, function (data) {
                console.log(data);
                $("#txtUserName").textbox({ "value": data.UserName });
                $("#txtUserPass").textbox({ "value": data.UserPass });
                $("#txtEmail").textbox({ "value": data.Email });
                $("#txtSort").textbox({ "value": 99 });
                $("#txtRegTime").val(ChangeDateFormat(data.RegTime));
                $("#txtId").val(data.ID);
            });
            $("#editDiv").css("display", "block");
            $('#editDiv').dialog({
                title: '编辑用户数据',
                width: 430,
                height: 600,
                collapsible: true,
                maximizable: true,
                resizable: true,
                modal: true,
                buttons: [{
                    text: '确定',
                    iconCls: 'icon-ok',
                    handler: function () {
                        //表单校验
                        //validateInfo($("#editForm"));
                        var isValidate = $("#editForm").form("validate");
                        if (isValidate) {
                            $("#editForm").submit();//提交表单
                        }
                    }
                }, {
                    text: '取消',
                    handler: function () {
                        $('#editDiv').dialog('close');
                    }
                }]
            });
        }

        function beforeEdit() {
            //$('#editDiv').dialog('close');
        }

        //更新以后调用该方法.
        function afterEdit(data) {
            if (data == "ok") {
                $('#editDiv').dialog('close');
                $('#tt').datagrid('reload');//加载表格不会跳到第一页。
            } else {
                $.messager.alert("提示", "修改的数据失败", "error");
            }
        }
        //将序列化成json格式后日期(毫秒数)转成日期格式
        function ChangeDateFormat(cellval) {
            var date = new Date(parseInt(cellval.replace("/Date(", "").replace(")/", ""), 10));
            var month = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1;
            var currentDate = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
            return date.getFullYear() + "-" + month + "-" + currentDate;
        }



    </script>









</body>
</html>
